@startuml

actor User
participant TokenEndpoint
participant AuthorizationServerEndpointsConfigurer
participant "tokenGranter:TokenGranter" as TokenGranter
participant CompositeTokenGranter
participant AbstractTokenGranter
participant ResourceOwnerPasswordTokenGranter
participant AuthenticationManager
participant AuthorizationServerTokenServices
participant TokenStore

User-> TokenEndpoint: postAccessToken()
' note [left|right] <注释> 添加注释
note left: /oauth/token [post]
activate TokenEndpoint

'TokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient)
'OAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest)
TokenEndpoint->TokenGranter: getTokenGranter().grant(grantType,tokenRequest)
activate TokenGranter

TokenGranter-> TokenGranter:grant(grantType, TokenRequest)
'AuthorizationServerEndpointsConfigurer：
'@Override
'				public OAuth2AccessToken grant(String grantType, TokenRequest tokenRequest) {
'					if (delegate == null) {
'						delegate = new CompositeTokenGranter(getDefaultTokenGranters());
'					}
'					return delegate.grant(grantType, tokenRequest);
'				}

'grant(grantType, TokenRequest)
TokenGranter-> AuthorizationServerEndpointsConfigurer:getDefaultTokenGranters
activate AuthorizationServerEndpointsConfigurer

TokenGranter<--AuthorizationServerEndpointsConfigurer:List<TokenGranter>
deactivate AuthorizationServerEndpointsConfigurer

TokenGranter-> CompositeTokenGranter: <<create>> (List<TokenGranter>)
activate CompositeTokenGranter

TokenGranter<-- CompositeTokenGranter:CompositeTokenGranter
deactivate CompositeTokenGranter

TokenGranter->CompositeTokenGranter:grant(grantType,TokenRequest)
activate CompositeTokenGranter

'CompositeTokenGranter: 迭代 TokenGranters 集合调用 grant(grantType,TokenRequest)
loop TokenGranter granter : tokenGranters
    alt "tokenGranter.grant(grantType, tokenRequest)!=null"

        CompositeTokenGranter->AbstractTokenGranter: 迭代TokenGranters集合调用 grant(grantType,TokenRequest)

        AbstractTokenGranter->AbstractTokenGranter:grant(grantType,TokenRequest)
        activate AbstractTokenGranter

        AbstractTokenGranter->AbstractTokenGranter:getAccessToken(ClientDetails,TokenRequest)
        activate AbstractTokenGranter

        AbstractTokenGranter->ResourceOwnerPasswordTokenGranter:getOAuth2Authentication(ClientDetails,TokenRequest)
        activate ResourceOwnerPasswordTokenGranter

'userAuth = authenticationManager.authenticate(userAuth);

        ResourceOwnerPasswordTokenGranter->AuthenticationManager:authenticate(userAuth)
        note left: Authentication userAuth = new UsernamePasswordAuthenticationToken(username, password)\nauthenticationManager.authenticate(userAuth)
        activate AuthenticationManager
        note right: 此处为 ProviderManager 类

        ResourceOwnerPasswordTokenGranter<--AuthenticationManager:Authentication userAuth
        deactivate AuthenticationManager

        AbstractTokenGranter<--ResourceOwnerPasswordTokenGranter:new OAuth2Authentication(storedOAuth2Request, userAuth)
        deactivate ResourceOwnerPasswordTokenGranter

'Authentication userAuth = new UsernamePasswordAuthenticationToken(username, password);
        AbstractTokenGranter-> AuthenticationManager:authenticate(Authentication)
        activate AuthenticationManager
        AbstractTokenGranter <-- AuthenticationManager:Authentication userAuth
        note right: 此处调用 AuthenticationManager的authenticate方法获取用户信息
        deactivate AuthenticationManager
'        OAuth2Request storedOAuth2Request = requestFactory.createOAuth2Request(client, tokenRequest);
'        		return new OAuth2Authentication(storedOAuth2Request, null);

        AbstractTokenGranter->AuthorizationServerTokenServices:createAccessToken(OAuth2Authentication)
        activate AuthorizationServerTokenServices

        AuthorizationServerTokenServices->TokenStore:getAccessToken(OAuth2Authentication)
        activate TokenStore

        AuthorizationServerTokenServices<--TokenStore:OAuth2AccessToken existingAccessToken
        deactivate TokenStore

        AuthorizationServerTokenServices->AuthorizationServerTokenServices:createAccessToken(OAuth2Authentication)
        activate AuthorizationServerTokenServices

        AuthorizationServerTokenServices->AuthorizationServerTokenServices:createAccessToken(OAuth2Authentication,OAuth2RefreshToken)
        activate AuthorizationServerTokenServices

        AuthorizationServerTokenServices<--AuthorizationServerTokenServices:OAuth2AccessToken accessToken
        deactivate AuthorizationServerTokenServices

        'tokenStore.storeAccessToken(accessToken, authentication);
        AuthorizationServerTokenServices->TokenStore:storeAccessToken(OAuth2AccessToken,OAuth2Authentication)
        deactivate AuthorizationServerTokenServices

'AbstractTokenGranter：tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));
        AbstractTokenGranter<--AuthorizationServerTokenServices:OAuth2AccessToken accessToken
        deactivate AbstractTokenGranter
        deactivate AuthorizationServerTokenServices

        CompositeTokenGranter<--AbstractTokenGranter:getAccessToken(client, tokenRequest):OAuth2AccessToken
        deactivate AbstractTokenGranter
    end
end

TokenGranter<--CompositeTokenGranter: granter.grant(grantType, tokenRequest):OAuth2AccessToken
deactivate CompositeTokenGranter

TokenEndpoint<--TokenGranter:OAuth2AccessToken
deactivate TokenGranter

User<--TokenEndpoint:OAuth2AccessToken
deactivate TokenEndpoint

@enduml